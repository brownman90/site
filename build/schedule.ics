BEGIN:VCALENDAR
CALSCALE:GREGORIAN
PRODID:iCalendar-Ruby
VERSION:2.0
BEGIN:VEVENT
DTSTAMP:20130614T001441
DTSTART:20130628T083000
SEQUENCE:0
SUMMARY:Doors Open
UID:2013-06-14T00:14:41+03:00_685824550@euruko2013.org
END:VEVENT
BEGIN:VEVENT
DTEND:20130628T094500
DTSTAMP:20130614T001441
DTSTART:20130628T090000
SEQUENCE:0
SUMMARY:Registration & Welcome Coffee
UID:2013-06-28T02:05:16+03:00_944844351@euruko2013.org
END:VEVENT
BEGIN:VEVENT
DTEND:20130628T100000
DTSTAMP:20130614T001441
DTSTART:20130628T094500
SEQUENCE:0
SUMMARY:Welcome
UID:2013-06-14T00:14:41+03:00_301527146@euruko2013.org
END:VEVENT
BEGIN:VEVENT
DESCRIPTION:Matz will talk about\, what else... Ruby! Honestly we have no i
 dea what Matz is going to talk about\, but we are pretty sure it's gonna be
  amazing. If we manage to find out we'll update this section with more info
 .
DTEND:20130628T110000
DTSTAMP:20130614T001441
DTSTART:20130628T100000
SEQUENCE:0
SUMMARY:Keynote
UID:2013-06-14T00:14:41+03:00_420826555@euruko2013.org
END:VEVENT
BEGIN:VEVENT
DTEND:20130628T111500
DTSTAMP:20130614T001441
DTSTART:20130628T110000
SEQUENCE:0
SUMMARY:Coffee break
UID:2013-06-14T00:14:41+03:00_58904866@euruko2013.org
END:VEVENT
BEGIN:VEVENT
DESCRIPTION:While Ruby is object oriented and imperative\, it does have som
 e features that allow for functional programming. In this talk we’ll compar
 e Haskell\, a functional programming language\, with Ruby while exploring t
 hese common functional patterns: higher order functions\, lazy evaluation\,
  and memoization. Along the way we’ll explore how Ruby works internally\, f
 ind out whether it’s a true functional language\, and zoom in to take a clo
 se look at Ruby 2.0’s implementation of the new “Enumerator::Lazy” feature.
DTEND:20130628T120000
DTSTAMP:20130614T001441
DTSTART:20130628T111500
SEQUENCE:0
SUMMARY:Functional Programming and Ruby
UID:2013-06-14T00:14:41+03:00_76750346@euruko2013.org
END:VEVENT
BEGIN:VEVENT
DESCRIPTION:Natural Language Processing (NLP) is the art and science of mak
 ing sense of user-generated data. It is a combination of state-of-the-art c
 omputer science techniques and linguistics. Being able to analyze plain tex
 t data allows us to gain a lot of insights. Popular NLP tasks are text summ
 arization\, keyword extraction or automatic extraction of the author's opin
 ion from a text. In the age of social media\, only NLP provides solutions t
 o analyze what users are really care about. Companies such as Google or Fac
 ebook invest millions in NLP solutions to harvest information from all the 
 data they have been gathering over the years. In this talk\, I will present
  you a real-world NLP problem. We will discuss this problem from both\, the
  linguistic and the computer science perspective. Throughout the talk\, we 
 will develop a processing pipeline to efficiently solve this problem in an 
 automated fashion. An NLP pipeline usually consists of multiple components\
 , each solving one aspect of the problem and presenting its own challenges.
  Among other things\, you will learn how to tackle the following essential 
 NLP problems using JRuby and OpenNLP.
DTEND:20130628T124500
DTSTAMP:20130614T001441
DTSTART:20130628T120000
SEQUENCE:0
SUMMARY:Natural Language Processing with Ruby
UID:2013-06-14T00:14:41+03:00_738217815@euruko2013.org
END:VEVENT
BEGIN:VEVENT
DTEND:20130628T140000
DTSTAMP:20130614T001441
DTSTART:20130628T124500
SEQUENCE:0
SUMMARY:Lunch break
UID:2013-06-14T00:14:41+03:00_366946140@euruko2013.org
END:VEVENT
BEGIN:VEVENT
DESCRIPTION:Money\, be careful with money. While developing a brand new web
 site for online betting I found the requirements related to the flow of mon
 ey were just not possible to implement with traditional datatypes. There we
 re fundamental features that no matter your precision\, would just not work
  correctly. After reflecting on the feature set\, we ended up resorting to 
 fractions. In this talk I'll explain how we integrated rationals in the ful
 l stack\, from JavaScript down to PostgreSQL\, going via Active Record. An 
 interesting journey that ends with all cents under control\, and me sleepin
 g very well at night.
DTEND:20130628T150000
DTSTAMP:20130614T001441
DTSTART:20130628T140000
SEQUENCE:0
SUMMARY:I See Your 127.32+\, A Tale of Rationals
UID:2013-06-14T00:14:41+03:00_562414684@euruko2013.org
END:VEVENT
BEGIN:VEVENT
DESCRIPTION:How often do you have to leave your comfort zone? How often doe
 s it happen that you need to change the fundamentals of your application? W
 ell… it has happened to my team recently. We had to abandon our way of thin
 king about Ruby on Rails applications. Single-threaded servers were not a c
 hoice anymore\, neither was JRuby nor Event Machine. And we had to handle u
 p to 200k requests per minute. This talk is a case study about how\, step b
 y step\, we got to multi threaded RoR application with MRI 1.9\, MySQL\, Da
 taMapper. I want to present how we came to the solution\, what did we have 
 to do to make our application thread safe\, how did we manage to use thread
 s in MRI and what we learned while working on the big feature\, that made u
 s change the fundamentals of our application. Although the application in t
 his case was built with Ruby on Rails\, the talk won't be specific to this 
 framework. I want to talk about threading and parallelism in Ruby and its o
 pen source libraries\, as well as the process of making deep changes in the
  application that handles pretty big traffic.
DTEND:20130628T154500
DTSTAMP:20130614T001441
DTSTART:20130628T150000
SEQUENCE:0
SUMMARY:... but we had to kill Unicorns
UID:2013-06-14T00:14:41+03:00_896449425@euruko2013.org
END:VEVENT
BEGIN:VEVENT
DTEND:20130628T160000
DTSTAMP:20130614T001441
DTSTART:20130628T154500
SEQUENCE:0
SUMMARY:Coffee break
UID:2013-06-14T00:14:41+03:00_436084086@euruko2013.org
END:VEVENT
BEGIN:VEVENT
DESCRIPTION:Garbage collection is one of the pillars of Ruby's performance 
 story\, but getting into the inner workings of MRI's garbage collector is a
  bit hairy. If you want to explore the garbage collector then you're going 
 to have to get your hands deep into C code. We're going to take a walk thro
 ugh the C internals from Foo.new through garbage collection in Ruby's MRI. 
 We’ll examine the idioms and optimizations in the C source and leave you fe
 eling comfortable to explore the code yourself. At the end of the rb_newobj
 () rabbit hole is a whole world of garbage collection. Major changes have b
 een made in MRI's garbage collector from Ruby 1.8 through 2.0: changes inte
 nded to make Ruby more performant\, changes that can capitalize on MRI's ro
 ots in UNIX. From mark-and-sweep to copy-on-write and bitmap marking\, we'l
 l see what the future of Ruby performance might look like by peering throug
 h the window of the garbage collector.
DTEND:20130628T164500
DTSTAMP:20130614T001441
DTSTART:20130628T160000
SEQUENCE:0
SUMMARY:Down the rb_newobj() Rabbit Hole: Garbage Collection and a Glimpse 
 into Ruby's Future
UID:2013-06-14T00:14:41+03:00_271653616@euruko2013.org
END:VEVENT
BEGIN:VEVENT
DESCRIPTION:This talk is a tale about a time when Object-Oriented Programmi
 ng was about objects and messages\, not about classes and methods\, when it
  was about behavior\, not schemas. You will understand how OO was intended 
 to be used and what it means to say that OO is about messages. We'll talk a
 bout the past and then go back to the future to look at our Class-Oriented 
 Programming culture and how we can fix it by doing real OO in Ruby. By doin
 g that\, we'll start to understand why principles like SOLID and Demeter ar
 e here to help us stop losing time and money. This talk is about making you
  reevaluate the way you approach OO.
DTEND:20130628T173000
DTSTAMP:20130614T001441
DTSTART:20130628T164500
SEQUENCE:0
SUMMARY:Forget about classes\, welcome objects
UID:2013-06-14T00:14:41+03:00_87676307@euruko2013.org
END:VEVENT
BEGIN:VEVENT
DTEND:20130628T180000
DTSTAMP:20130614T001441
DTSTART:20130628T173000
SEQUENCE:0
SUMMARY:Lightning Talks
UID:2013-06-27T01:00:37+03:00_532448623@euruko2013.org
END:VEVENT
BEGIN:VEVENT
DTSTAMP:20130614T001441
DTSTART:20130629T083000
SEQUENCE:0
SUMMARY:Doors Open
UID:2013-06-14T00:14:41+03:00_78298941@euruko2013.org
END:VEVENT
BEGIN:VEVENT
DTEND:20130629T100000
DTSTAMP:20130614T001441
DTSTART:20130629T094500
SEQUENCE:0
SUMMARY:Welcome
UID:2013-06-14T00:14:41+03:00_33066495@euruko2013.org
END:VEVENT
BEGIN:VEVENT
DESCRIPTION:Koichi will show ways to achieve a more efficient Ruby 2.1 inte
 rpreter\, targeted for the next release of CRuby/MRI. The talk will include
  VM / compilier optimizations\, memory / object management and runtime libr
 aries modification. Most of the techniques shown and implementations will b
 e work in progress. This talk is an update version of the one given to Ruby
  Kaigi 2013.
DTEND:20130629T110000
DTSTAMP:20130614T001441
DTSTART:20130629T100000
SEQUENCE:0
SUMMARY:Towards more efficient Ruby 2.1
UID:2013-06-14T00:14:41+03:00_683256170@euruko2013.org
END:VEVENT
BEGIN:VEVENT
DTEND:20130629T111500
DTSTAMP:20130614T001441
DTSTART:20130629T110000
SEQUENCE:0
SUMMARY:Coffee break
UID:2013-06-14T00:14:41+03:00_585641328@euruko2013.org
END:VEVENT
BEGIN:VEVENT
DESCRIPTION:You care about your code. You write nicely factored and clean c
 ode\, with nice and small methods that each do just what they are supposed 
 to do. Maybe you worry sometimes that these additional methods and small ob
 jects can be problematic? This talk hopefully makes you stop worrying about
  this. So with all this care that you do\, what can a Ruby implementation d
 o to make sure your code actually runs fast? In this talk I will discuss th
 e techniques used that allow your Ruby code to execute faster. How do we ma
 ke sure calling a method is cheap or even free? How can we let you mostly g
 et away with allocating a lot of objects? How do we make iterating with .ea
 ch as fast as a while loop? Different techniques will be discussed\, such a
 s inline caches\, just in time compilation\, method / block inlining and be
 tter garbage collection. As a Rubinius contributor I've worked on all these
  subjects so I know a few things about these topics\, but these will explai
 ned such that any Ruby developer can understand how these optimizations wor
 k. The quest for a faster Ruby is happening in a lot of places and you can 
 learn how this is done!
DTEND:20130629T120000
DTSTAMP:20130614T001441
DTSTART:20130629T111500
SEQUENCE:0
SUMMARY:The future of Ruby is faster
UID:2013-06-14T00:14:41+03:00_274123929@euruko2013.org
END:VEVENT
BEGIN:VEVENT
DESCRIPTION:Rails is a great framework for creating web apps... for awhile.
  What do you do when your codebase grows large? How do you handle large tea
 ms of developers? When performance becomes an issue\, how do you scale? Mos
 t importantly\, how do you write code which can easily be refactored later?
  This is a story of a real life project built from day 1 with all these que
 stions in mind. Learn about the problems we solved and lessons we learned: 
 how to partition your Rails app into distinct modular engines\, how to spee
 d up your test suite by only running code effected by your changes\, how to
  add a layer on top of ActiveRecord to enforce loose coupling\, and many ot
 her patterns that can be applied to your own Rails apps!
DTEND:20130629T124500
DTSTAMP:20130614T001441
DTSTART:20130629T120000
SEQUENCE:0
SUMMARY:Architecting your Rails app for success!
UID:2013-06-14T00:14:41+03:00_316814982@euruko2013.org
END:VEVENT
BEGIN:VEVENT
DTEND:20130629T140000
DTSTAMP:20130614T001441
DTSTART:20130629T124500
SEQUENCE:0
SUMMARY:Lunch break
UID:2013-06-14T00:14:41+03:00_626185316@euruko2013.org
END:VEVENT
BEGIN:VEVENT
DESCRIPTION:Ruby's strengths lie in its ability to blend styles. We all kno
 w about OOP and Ruby\, but it often leans functional\, as well. There's a s
 tyle of writing programs called 'Functional Reactive Programming' that is e
 xtremely useful in the Haskell world\, but isn't really used in Ruby at all
 . In this talk\, Steve will show you FRP\, an implementation of it in Ruby\
 , and how to write programs in this style.
DTEND:20130629T150000
DTSTAMP:20130614T001441
DTSTART:20130629T140000
SEQUENCE:0
SUMMARY:Functional Reactive Programming in Ruby
UID:2013-06-14T00:14:41+03:00_671476380@euruko2013.org
END:VEVENT
BEGIN:VEVENT
DESCRIPTION:Light up your cores! Learn how to achieve levels of scale hithe
 rto unknown to mere mortals. This talk will cover concurrency and paralleli
 sation for the discerning rubyist. We'll cover why MRI is keeping your CPUs
  way cooler than they find comfortable and how you can unlock unfound level
 s of roflscale by spending a little time with celluloid and JRuby.
DTEND:20130629T154500
DTSTAMP:20130614T001441
DTSTART:20130629T150000
SEQUENCE:0
SUMMARY:Achieving zomgscale with Celluloid and JRuby!
UID:2013-06-14T00:14:41+03:00_946020904@euruko2013.org
END:VEVENT
BEGIN:VEVENT
DTEND:20130629T160000
DTSTAMP:20130614T001441
DTSTART:20130629T154500
SEQUENCE:0
SUMMARY:Coffee break
UID:2013-06-14T00:14:41+03:00_587859040@euruko2013.org
END:VEVENT
BEGIN:VEVENT
DESCRIPTION:All the cool cats are using Redis\, and with a reason: It's fas
 t\, it's robust\, it's easy and it's web scale. Put it together with Ruby a
 nd it's fun too! In this session I will talk about what is redis\, what you
  can do with it\, how you can use it from Ruby\, why you should be using it
  already and some common patterns when dealing with it.
DTEND:20130629T164500
DTSTAMP:20130614T001441
DTSTART:20130629T160000
SEQUENCE:0
SUMMARY:Fun with Ruby and Redis
UID:2013-06-14T00:14:41+03:00_739258370@euruko2013.org
END:VEVENT
BEGIN:VEVENT
DESCRIPTION:Some say it’s madness\, we answer it’s sanity. Have you ever de
 ployed to production clutching your teeth\, crossing your fingers\, holding
  lucky charms or praying to the god of luck to have a successful one? Well.
 . we haven’t! Why? Because we have made testing a constant and indispensabl
 e part of our work. Quality assurance is a vital part of program developmen
 t so that the requirements of the final program are achieved\, and we think
  testing is the right way to it. Most of the times we know when something g
 oes wrong really early and we get to change stuff here and there without wo
 rrying that the final result will be a tower of cards coming tumbling down.
DTEND:20130629T173000
DTSTAMP:20130614T001441
DTSTART:20130629T164500
SEQUENCE:0
SUMMARY:35.000 tests and counting!
UID:2013-06-14T00:14:41+03:00_947753377@euruko2013.org
END:VEVENT
BEGIN:VEVENT
DTEND:20130629T180000
DTSTAMP:20130614T001441
DTSTART:20130629T173000
SEQUENCE:0
SUMMARY:Lightning Talks
UID:2013-06-27T01:00:37+03:00_666656084@euruko2013.org
END:VEVENT
BEGIN:VEVENT
DTEND:20130629T183000
DTSTAMP:20130614T001441
DTSTART:20130629T180000
SEQUENCE:0
SUMMARY:Closing & Voting
UID:2013-06-14T00:14:41+03:00_447131622@euruko2013.org
END:VEVENT
END:VCALENDAR
